{
  "address": "0xBabd8268f9579b05E6042661081eF6015E1d34dE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "AccountCreation",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountCreationCode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "ret",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb2659bfa59255ab4701c653fd50d3c56a796d8c64b2ed243847dfb5ef2ef6cd",
  "receipt": {
    "to": null,
    "from": "0x53fE9288897e254698175740aa359E19E26c10af",
    "contractAddress": "0xBabd8268f9579b05E6042661081eF6015E1d34dE",
    "transactionIndex": 4,
    "gasUsed": "5275405",
    "logsBloom": "0x00000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000084000000000000000000000000000000000000000000000000080000000400000000000000000000000000000000000000000000000000080800000000000000000200000000000000000000000000400000000000000000000000000000000004800000000000000000001000000040000000000000000000000100040000000000000000000000000000000000000000000800000000000000000000000100000",
    "blockHash": "0x4c711adcffead9a94448973ce5f6f505927c50b2c9b19858edea53f6701de432",
    "transactionHash": "0xfb2659bfa59255ab4701c653fd50d3c56a796d8c64b2ed243847dfb5ef2ef6cd",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 36228521,
        "transactionHash": "0xfb2659bfa59255ab4701c653fd50d3c56a796d8c64b2ed243847dfb5ef2ef6cd",
        "address": "0x620f34b7c86BC84a6F0F70F6577B75C5d5b932b2",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 20,
        "blockHash": "0x4c711adcffead9a94448973ce5f6f505927c50b2c9b19858edea53f6701de432"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 36228521,
        "transactionHash": "0xfb2659bfa59255ab4701c653fd50d3c56a796d8c64b2ed243847dfb5ef2ef6cd",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000053fe9288897e254698175740aa359e19e26c10af",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003839dbcdde56230000000000000000000000000000000000000000000000001e05c786d986a4260000000000000000000000000000000000000000000031d05e7456b75395ae840000000000000000000000000000000000000000000000001dcd8dab0ba84e030000000000000000000000000000000000000000000031d05eac9093217404a7",
        "logIndex": 21,
        "blockHash": "0x4c711adcffead9a94448973ce5f6f505927c50b2c9b19858edea53f6701de432"
      }
    ],
    "blockNumber": 36228521,
    "cumulativeGasUsed": "5708265",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "f5fcfd5b163a6338f30be40819fb4773",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"AccountCreation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountCreationCode()\":{\"details\":\"Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\"},\"createAccount(address,address,uint256)\":{\"params\":{\"entryPoint\":\"address of the EntryPoint contract\",\"index\":\"extra salt that allows to deploy more account if needed for same owner\",\"owner\":\"owner of the account to be deployed\"},\"returns\":{\"ret\":\"the address of the deployed account\"}},\"getAddress(address,address,uint256)\":{\"params\":{\"entryPoint\":\"address of the EntryPoint contract\",\"index\":\"extra salt that allows to deploy more account if needed for same owner\",\"owner\":\"owner of the account to be deployed\"}}},\"title\":\"Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAccount(address,address,uint256)\":{\"notice\":\"Creates a new account\"},\"getAddress(address,address,uint256)\":{\"notice\":\"Deploys account using create2\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/wallet/EtherspotWalletFactory.sol\":\"EtherspotWalletFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x84cbc33838326f8a92fb9db5e27176f8eda5de8797cd6c838c11ef99c724accc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x480bc688d336e5d8b30f6705af3c73468dc7a8c4e7edcfcacce955939b0786fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x85cc5aca68692044586dc5ca19a9868d3288f6b35d1085c620dd0278ed0abdaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"account-abstraction/contracts/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-empty-blocks */\\r\\n\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\r\\nimport \\\"./Helpers.sol\\\";\\r\\n\\r\\n/**\\r\\n * Basic account implementation.\\r\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\r\\n * specific account implementation should inherit it and provide the account-specific logic\\r\\n */\\r\\nabstract contract BaseAccount is IAccount {\\r\\n    using UserOperationLib for UserOperation;\\r\\n\\r\\n    //return value in case of signature failure, with no time-range.\\r\\n    // equivalent to _packValidationData(true,0,0);\\r\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\r\\n\\r\\n    /**\\r\\n     * Return the account nonce.\\r\\n     * This method returns the next sequential nonce.\\r\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\r\\n     */\\r\\n    function getNonce() public view virtual returns (uint256) {\\r\\n        return entryPoint().getNonce(address(this), 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * return the entryPoint used by this account.\\r\\n     * subclass should return the current entryPoint used by this account.\\r\\n     */\\r\\n    function entryPoint() public view virtual returns (IEntryPoint);\\r\\n\\r\\n    /**\\r\\n     * Validate user's signature and nonce.\\r\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\r\\n     */\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\r\\n    external override virtual returns (uint256 validationData) {\\r\\n        _requireFromEntryPoint();\\r\\n        validationData = _validateSignature(userOp, userOpHash);\\r\\n        _validateNonce(userOp.nonce);\\r\\n        _payPrefund(missingAccountFunds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ensure the request comes from the known entrypoint.\\r\\n     */\\r\\n    function _requireFromEntryPoint() internal virtual view {\\r\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * validate the signature is valid for this message.\\r\\n     * @param userOp validate the userOp.signature field\\r\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\r\\n     *          (also hashes the entrypoint and chain id)\\r\\n     * @return validationData signature and time-range of this operation\\r\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\r\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\r\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\r\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\r\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\r\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\r\\n     */\\r\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\r\\n    internal virtual returns (uint256 validationData);\\r\\n\\r\\n    /**\\r\\n     * Validate the nonce of the UserOperation.\\r\\n     * This method may validate the nonce requirement of this account.\\r\\n     * e.g.\\r\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\r\\n     *      `require(nonce < type(uint64).max)`\\r\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\r\\n     *      `require(nonce & type(uint64).max == 0)`\\r\\n     *\\r\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\r\\n     * action is needed by the account itself.\\r\\n     *\\r\\n     * @param nonce to validate\\r\\n     *\\r\\n     * solhint-disable-next-line no-empty-blocks\\r\\n     */\\r\\n    function _validateNonce(uint256 nonce) internal view virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\r\\n     * subclass MAY override this method for better funds management\\r\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\r\\n     * it will not be required to send again)\\r\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\r\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\r\\n     */\\r\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\r\\n        if (missingAccountFunds != 0) {\\r\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\r\\n            (success);\\r\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x14230c2a2c14b818a60f1c8f9dcc66df870c38f6bccc7f4c543e96937e4a99aa\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\n/**\\r\\n * returned data from validateUserOp.\\r\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\r\\n * @param aggregator - address(0) - the account validated the signature by itself.\\r\\n *              address(1) - the account failed to validate the signature.\\r\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\r\\n * @param validAfter - this UserOp is valid only after this timestamp.\\r\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\r\\n */\\r\\n    struct ValidationData {\\r\\n        address aggregator;\\r\\n        uint48 validAfter;\\r\\n        uint48 validUntil;\\r\\n    }\\r\\n\\r\\n//extract sigFailed, validAfter, validUntil.\\r\\n// also convert zero validUntil to type(uint48).max\\r\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\r\\n        address aggregator = address(uint160(validationData));\\r\\n        uint48 validUntil = uint48(validationData >> 160);\\r\\n        if (validUntil == 0) {\\r\\n            validUntil = type(uint48).max;\\r\\n        }\\r\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n// intersect account and paymaster ranges.\\r\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\r\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\r\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\r\\n        address aggregator = accountValidationData.aggregator;\\r\\n        if (aggregator == address(0)) {\\r\\n            aggregator = pmValidationData.aggregator;\\r\\n        }\\r\\n        uint48 validAfter = accountValidationData.validAfter;\\r\\n        uint48 validUntil = accountValidationData.validUntil;\\r\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\r\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\r\\n\\r\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\r\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp\\r\\n * @param data - the ValidationData to pack\\r\\n */\\r\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\r\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\r\\n * @param sigFailed - true for signature failure, false for success\\r\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\r\\n * @param validAfter first timestamp this UserOperation is valid\\r\\n */\\r\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\r\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * keccak function over calldata.\\r\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\r\\n */\\r\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            let mem := mload(0x40)\\r\\n            let len := data.length\\r\\n            calldatacopy(mem, data.offset, len)\\r\\n            ret := keccak256(mem, len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\",\"keccak256\":\"0xd0e3f0ed1a540a380fab5dda8aeafcace263802e60095deec17cc96dd1590743\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\n\\r\\ninterface IAccount {\\r\\n\\r\\n    /**\\r\\n     * Validate user's signature and nonce\\r\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\r\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\r\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\r\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\r\\n     *\\r\\n     * @dev Must validate caller is the entryPoint.\\r\\n     *      Must validate the signature and nonce\\r\\n     * @param userOp the operation that is about to be executed.\\r\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\r\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\r\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\r\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\r\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\r\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\r\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\r\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\r\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\r\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\r\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\r\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\r\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\r\\n     */\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\r\\n    external returns (uint256 validationData);\\r\\n}\\r\\n\",\"keccak256\":\"0x3dc911b985542365d3e321c86dd144ea20f9fde8662d8bdfc1c2dc778750c74b\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\n\\r\\n/**\\r\\n * Aggregated Signatures validator.\\r\\n */\\r\\ninterface IAggregator {\\r\\n\\r\\n    /**\\r\\n     * validate aggregated signature.\\r\\n     * revert if the aggregated signature does not match the given list of operations.\\r\\n     */\\r\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\r\\n\\r\\n    /**\\r\\n     * validate signature of a single userOp\\r\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\r\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\r\\n     * @param userOp the userOperation received from the user.\\r\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\r\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\r\\n     */\\r\\n    function validateUserOpSignature(UserOperation calldata userOp)\\r\\n    external view returns (bytes memory sigForUserOp);\\r\\n\\r\\n    /**\\r\\n     * aggregate multiple signatures into a single value.\\r\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\r\\n     * bundler MAY use optimized custom code perform this aggregation\\r\\n     * @param userOps array of UserOperations to collect the signatures from.\\r\\n     * @return aggregatedSignature the aggregated signature\\r\\n     */\\r\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\r\\n}\\r\\n\",\"keccak256\":\"0xfc25632a56d81f044b9faf18d3bc7cf75cf45c107a5f29c90cc9b746b9a8ab6d\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\r\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\r\\n ** Only one instance required on each chain.\\r\\n **/\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-inline-assembly */\\r\\n/* solhint-disable reason-string */\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\nimport \\\"./IStakeManager.sol\\\";\\r\\nimport \\\"./IAggregator.sol\\\";\\r\\nimport \\\"./INonceManager.sol\\\";\\r\\n\\r\\ninterface IEntryPoint is IStakeManager, INonceManager {\\r\\n\\r\\n    /***\\r\\n     * An event emitted after each successful request\\r\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\r\\n     * @param sender - the account that generates this request.\\r\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\r\\n     * @param nonce - the nonce value from the request.\\r\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\r\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\r\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\r\\n     */\\r\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\r\\n\\r\\n    /**\\r\\n     * account \\\"sender\\\" was deployed.\\r\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\r\\n     * @param sender the account that is deployed\\r\\n     * @param factory the factory used to deploy this account (in the initCode)\\r\\n     * @param paymaster the paymaster used by this UserOp\\r\\n     */\\r\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\r\\n\\r\\n    /**\\r\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\r\\n     * @param userOpHash the request unique identifier.\\r\\n     * @param sender the sender of this request\\r\\n     * @param nonce the nonce used in the request\\r\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\r\\n     */\\r\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\r\\n\\r\\n    /**\\r\\n     * an event emitted by handleOps(), before starting the execution loop.\\r\\n     * any event emitted before this event, is part of the validation.\\r\\n     */\\r\\n    event BeforeExecution();\\r\\n\\r\\n    /**\\r\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\r\\n     */\\r\\n    event SignatureAggregatorChanged(address indexed aggregator);\\r\\n\\r\\n    /**\\r\\n     * a custom revert error of handleOps, to identify the offending op.\\r\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\r\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\r\\n     *  @param reason - revert reason\\r\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\r\\n     *      so a failure can be attributed to the correct entity.\\r\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\r\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\r\\n     */\\r\\n    error FailedOp(uint256 opIndex, string reason);\\r\\n\\r\\n    /**\\r\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\r\\n     */\\r\\n    error SignatureValidationFailed(address aggregator);\\r\\n\\r\\n    /**\\r\\n     * Successful result from simulateValidation.\\r\\n     * @param returnInfo gas and time-range returned values\\r\\n     * @param senderInfo stake information about the sender\\r\\n     * @param factoryInfo stake information about the factory (if any)\\r\\n     * @param paymasterInfo stake information about the paymaster (if any)\\r\\n     */\\r\\n    error ValidationResult(ReturnInfo returnInfo,\\r\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\r\\n\\r\\n    /**\\r\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\r\\n     * @param returnInfo gas and time-range returned values\\r\\n     * @param senderInfo stake information about the sender\\r\\n     * @param factoryInfo stake information about the factory (if any)\\r\\n     * @param paymasterInfo stake information about the paymaster (if any)\\r\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\r\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\r\\n     */\\r\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\r\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\r\\n        AggregatorStakeInfo aggregatorInfo);\\r\\n\\r\\n    /**\\r\\n     * return value of getSenderAddress\\r\\n     */\\r\\n    error SenderAddressResult(address sender);\\r\\n\\r\\n    /**\\r\\n     * return value of simulateHandleOp\\r\\n     */\\r\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\r\\n\\r\\n    //UserOps handled, per aggregator\\r\\n    struct UserOpsPerAggregator {\\r\\n        UserOperation[] userOps;\\r\\n\\r\\n        // aggregator address\\r\\n        IAggregator aggregator;\\r\\n        // aggregated signature\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Execute a batch of UserOperation.\\r\\n     * no signature aggregator is used.\\r\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\r\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\r\\n     * @param ops the operations to execute\\r\\n     * @param beneficiary the address to receive the fees\\r\\n     */\\r\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\r\\n\\r\\n    /**\\r\\n     * Execute a batch of UserOperation with Aggregators\\r\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\r\\n     * @param beneficiary the address to receive the fees\\r\\n     */\\r\\n    function handleAggregatedOps(\\r\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\r\\n        address payable beneficiary\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * generate a request Id - unique identifier for this request.\\r\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\r\\n     */\\r\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\r\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\r\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\r\\n     * @param userOp the user operation to validate.\\r\\n     */\\r\\n    function simulateValidation(UserOperation calldata userOp) external;\\r\\n\\r\\n    /**\\r\\n     * gas and return values during simulation\\r\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\r\\n     * @param prefund the required prefund for this operation\\r\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\r\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\r\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\r\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\r\\n     */\\r\\n    struct ReturnInfo {\\r\\n        uint256 preOpGas;\\r\\n        uint256 prefund;\\r\\n        bool sigFailed;\\r\\n        uint48 validAfter;\\r\\n        uint48 validUntil;\\r\\n        bytes paymasterContext;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * returned aggregated signature info.\\r\\n     * the aggregator returned by the account, and its current stake.\\r\\n     */\\r\\n    struct AggregatorStakeInfo {\\r\\n        address aggregator;\\r\\n        StakeInfo stakeInfo;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get counterfactual sender address.\\r\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\r\\n     * this method always revert, and returns the address in SenderAddressResult error\\r\\n     * @param initCode the constructor code to be passed into the UserOperation.\\r\\n     */\\r\\n    function getSenderAddress(bytes memory initCode) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\r\\n     * this method will always revert with \\\"ExecutionResult\\\".\\r\\n     * it performs full validation of the UserOperation, but ignores signature error.\\r\\n     * an optional target address is called after the userop succeeds, and its value is returned\\r\\n     * (before the entire call is reverted)\\r\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\r\\n     * with trace enabled to track the emitted events.\\r\\n     * @param op the UserOperation to simulate\\r\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\r\\n     *        are set to the return from that call.\\r\\n     * @param targetCallData callData to pass to target address\\r\\n     */\\r\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xe43f3d60c2df16d7c78f9da7067da1b0c7c66f61f60290552364992f0aaf13a3\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface INonceManager {\\r\\n\\r\\n    /**\\r\\n     * Return the next nonce for this sender.\\r\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\r\\n     * But UserOp with different keys can come with arbitrary order.\\r\\n     *\\r\\n     * @param sender the account address\\r\\n     * @param key the high 192 bit of the nonce\\r\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\r\\n     */\\r\\n    function getNonce(address sender, uint192 key)\\r\\n    external view returns (uint256 nonce);\\r\\n\\r\\n    /**\\r\\n     * Manually increment the nonce of the sender.\\r\\n     * This method is exposed just for completeness..\\r\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\r\\n     * as the EntryPoint will update the nonce regardless.\\r\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\r\\n     * UserOperations will not pay extra for the first transaction with a given key.\\r\\n     */\\r\\n    function incrementNonce(uint192 key) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaac170aa38a3adde8ad100930d585a725e1217eee4b0828bab88dc387953bd35\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/**\\r\\n * manage deposits and stakes.\\r\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\r\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\r\\n */\\r\\ninterface IStakeManager {\\r\\n\\r\\n    event Deposited(\\r\\n        address indexed account,\\r\\n        uint256 totalDeposit\\r\\n    );\\r\\n\\r\\n    event Withdrawn(\\r\\n        address indexed account,\\r\\n        address withdrawAddress,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// Emitted when stake or unstake delay are modified\\r\\n    event StakeLocked(\\r\\n        address indexed account,\\r\\n        uint256 totalStaked,\\r\\n        uint256 unstakeDelaySec\\r\\n    );\\r\\n\\r\\n    /// Emitted once a stake is scheduled for withdrawal\\r\\n    event StakeUnlocked(\\r\\n        address indexed account,\\r\\n        uint256 withdrawTime\\r\\n    );\\r\\n\\r\\n    event StakeWithdrawn(\\r\\n        address indexed account,\\r\\n        address withdrawAddress,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @param deposit the entity's deposit\\r\\n     * @param staked true if this entity is staked.\\r\\n     * @param stake actual amount of ether staked for this entity.\\r\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\r\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\r\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\r\\n     *    and the rest fit into a 2nd cell.\\r\\n     *    112 bit allows for 10^15 eth\\r\\n     *    48 bit for full timestamp\\r\\n     *    32 bit allows 150 years for unstake delay\\r\\n     */\\r\\n    struct DepositInfo {\\r\\n        uint112 deposit;\\r\\n        bool staked;\\r\\n        uint112 stake;\\r\\n        uint32 unstakeDelaySec;\\r\\n        uint48 withdrawTime;\\r\\n    }\\r\\n\\r\\n    //API struct used by getStakeInfo and simulateValidation\\r\\n    struct StakeInfo {\\r\\n        uint256 stake;\\r\\n        uint256 unstakeDelaySec;\\r\\n    }\\r\\n\\r\\n    /// @return info - full deposit information of given account\\r\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\r\\n\\r\\n    /// @return the deposit (for gas payment) of the account\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * add to the deposit of the given account\\r\\n     */\\r\\n    function depositTo(address account) external payable;\\r\\n\\r\\n    /**\\r\\n     * add to the account's stake - amount and delay\\r\\n     * any pending unstake is first cancelled.\\r\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\r\\n     */\\r\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\r\\n\\r\\n    /**\\r\\n     * attempt to unlock the stake.\\r\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\r\\n     */\\r\\n    function unlockStake() external;\\r\\n\\r\\n    /**\\r\\n     * withdraw from the (unlocked) stake.\\r\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\r\\n     * @param withdrawAddress the address to send withdrawn value.\\r\\n     */\\r\\n    function withdrawStake(address payable withdrawAddress) external;\\r\\n\\r\\n    /**\\r\\n     * withdraw from the deposit.\\r\\n     * @param withdrawAddress the address to send withdrawn value.\\r\\n     * @param withdrawAmount the amount to withdraw.\\r\\n     */\\r\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xda1caee7c7c1971432bad377ef0f92a1be3786af639900276448670eebe1e7d6\",\"license\":\"GPL-3.0-only\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\r\\n\\r\\n/**\\r\\n * User Operation struct\\r\\n * @param sender the sender account of this request.\\r\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\r\\n     * @param initCode if set, the account contract will be created by this constructor/\\r\\n     * @param callData the method call to execute on this account.\\r\\n     * @param callGasLimit the gas limit passed to the callData method call.\\r\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\r\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\r\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\r\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\r\\n     */\\r\\n    struct UserOperation {\\r\\n\\r\\n        address sender;\\r\\n        uint256 nonce;\\r\\n        bytes initCode;\\r\\n        bytes callData;\\r\\n        uint256 callGasLimit;\\r\\n        uint256 verificationGasLimit;\\r\\n        uint256 preVerificationGas;\\r\\n        uint256 maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas;\\r\\n        bytes paymasterAndData;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * Utility functions helpful when working with UserOperation structs.\\r\\n */\\r\\nlibrary UserOperationLib {\\r\\n\\r\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\r\\n        address data;\\r\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\r\\n        assembly {data := calldataload(userOp)}\\r\\n        return address(uint160(data));\\r\\n    }\\r\\n\\r\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\r\\n    // pay above what he signed for.\\r\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\r\\n    unchecked {\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\r\\n            //legacy mode (for networks that don't support basefee opcode)\\r\\n            return maxFeePerGas;\\r\\n        }\\r\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\r\\n        address sender = getSender(userOp);\\r\\n        uint256 nonce = userOp.nonce;\\r\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\r\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\r\\n        uint256 callGasLimit = userOp.callGasLimit;\\r\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\r\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\r\\n\\r\\n        return abi.encode(\\r\\n            sender, nonce,\\r\\n            hashInitCode, hashCallData,\\r\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\r\\n            maxFeePerGas, maxPriorityFeePerGas,\\r\\n            hashPaymasterAndData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\r\\n        return keccak256(pack(userOp));\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1487b6ac6d5bb83af209fa1f272f0952d80e5789485946e2f2718bcc4c190f6d\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-empty-blocks */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * Token callback handler.\\r\\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\\r\\n */\\r\\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\\r\\n    function tokensReceived(\\r\\n        address,\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata,\\r\\n        bytes calldata\\r\\n    ) external pure override {\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] calldata,\\r\\n        uint256[] calldata,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\r\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\r\\n            interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xacdacb2db2c07979e600b2559935645e720d7f65b7a97e61da7355659083ce65\",\"license\":\"GPL-3.0\"},\"src/access/AccessController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nabstract contract AccessController {\\r\\n    mapping(address => bool) private owners;\\r\\n    mapping(address => bool) private guardians;\\r\\n\\r\\n    event OwnerAdded(address newOwner);\\r\\n    event OwnerRemoved(address removedOwner);\\r\\n    event GuardianAdded(address newGuardian);\\r\\n    event GuardianRemoved(address removedGuardian);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(\\r\\n            isOwner(msg.sender) || msg.sender == address(this),\\r\\n            \\\"ACL:: only owner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOrGuardian() {\\r\\n        require(\\r\\n            isOwner(msg.sender) ||\\r\\n                msg.sender == address(this) ||\\r\\n                isGuardian(msg.sender),\\r\\n            \\\"ACL:: only owner or guardian\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwnerOrEntryPoint(address _entryPoint) {\\r\\n        require(\\r\\n            msg.sender == _entryPoint || isOwner(msg.sender),\\r\\n            \\\"ACL:: not owner or entryPoint\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOwner(address _address) public view returns (bool) {\\r\\n        return owners[_address];\\r\\n    }\\r\\n\\r\\n    function isGuardian(address _address) public view returns (bool) {\\r\\n        return guardians[_address];\\r\\n    }\\r\\n\\r\\n    function addOwner(address _newOwner) external onlyOwnerOrGuardian {\\r\\n        _addOwner(_newOwner);\\r\\n    }\\r\\n\\r\\n    function removeOwner(address _owner) external onlyOwnerOrGuardian {\\r\\n        _removeOwner(_owner);\\r\\n    }\\r\\n\\r\\n    function addGuardian(address _newGuardian) external onlyOwner {\\r\\n        _addGuardian(_newGuardian);\\r\\n    }\\r\\n\\r\\n    function removeGuardian(address _guardian) external onlyOwner {\\r\\n        _removeGuardian(_guardian);\\r\\n    }\\r\\n\\r\\n    // INTERNAL\\r\\n\\r\\n    function _addOwner(address _newOwner) internal {\\r\\n        // no check for address(0) as used when creating wallet via BLS.\\r\\n        require(_newOwner != address(0), \\\"ACL:: zero address\\\");\\r\\n        require(!owners[_newOwner], \\\"ACL:: already owner\\\");\\r\\n        emit OwnerAdded(_newOwner);\\r\\n        owners[_newOwner] = true;\\r\\n    }\\r\\n\\r\\n    function _addGuardian(address _newGuardian) internal {\\r\\n        require(_newGuardian != address(0), \\\"ACL:: zero address\\\");\\r\\n        require(!guardians[_newGuardian], \\\"ACL:: already guardian\\\");\\r\\n        emit GuardianAdded(_newGuardian);\\r\\n        guardians[_newGuardian] = true;\\r\\n    }\\r\\n\\r\\n    function _removeOwner(address _owner) internal {\\r\\n        require(msg.sender != _owner, \\\"ACL:: removing self\\\");\\r\\n        require(owners[_owner], \\\"ACL:: non-existant owner\\\");\\r\\n        emit OwnerRemoved(_owner);\\r\\n        owners[_owner] = false;\\r\\n    }\\r\\n\\r\\n    function _removeGuardian(address _guardian) internal {\\r\\n        require(guardians[_guardian], \\\"ACL:: non-existant guardian\\\");\\r\\n        emit GuardianRemoved(_guardian);\\r\\n        guardians[_guardian] = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe16cb9104f5cc99db1023b687291c05395463d60bb60a807d53e95836c92ff5e\",\"license\":\"MIT\"},\"src/helpers/UniversalSignatureValidator.sol\":{\"content\":\"// As per ERC-6492 example\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IERC1271Wallet {\\r\\n    function isValidSignature(\\r\\n        bytes32 hash,\\r\\n        bytes calldata signature\\r\\n    ) external view returns (bytes4 magicValue);\\r\\n}\\r\\n\\r\\nerror ERC1271Revert(bytes error);\\r\\nerror ERC6492DeployFailed(bytes error);\\r\\n\\r\\ncontract UniversalSigValidator {\\r\\n    bytes32 private constant ERC6492_DETECTION_SUFFIX =\\r\\n        0x6492649264926492649264926492649264926492649264926492649264926492;\\r\\n    bytes4 private constant ERC1271_SUCCESS = 0x1626ba7e;\\r\\n\\r\\n    function isValidSigImpl(\\r\\n        address _signer,\\r\\n        bytes32 _hash,\\r\\n        bytes calldata _signature,\\r\\n        bool allowSideEffects\\r\\n    ) public returns (bool) {\\r\\n        uint contractCodeLen = address(_signer).code.length;\\r\\n        bytes memory sigToValidate;\\r\\n        // The order here is striclty defined in https://eips.ethereum.org/EIPS/eip-6492\\r\\n        // - ERC-6492 suffix check and verification first, while being permissive in case the contract is already deployed; if the contract is deployed we will check the sig against the deployed version, this allows 6492 signatures to still be validated while taking into account potential key rotation\\r\\n        // - ERC-1271 verification if there's contract code\\r\\n        // - finally, ecrecover\\r\\n        bool isCounterfactual = bytes32(\\r\\n            _signature[_signature.length - 32:_signature.length]\\r\\n        ) == ERC6492_DETECTION_SUFFIX;\\r\\n        if (isCounterfactual) {\\r\\n            address create2Factory;\\r\\n            bytes memory factoryCalldata;\\r\\n            (create2Factory, factoryCalldata, sigToValidate) = abi.decode(\\r\\n                _signature[0:_signature.length - 32],\\r\\n                (address, bytes, bytes)\\r\\n            );\\r\\n\\r\\n            if (contractCodeLen == 0) {\\r\\n                (bool success, bytes memory err) = create2Factory.call(\\r\\n                    factoryCalldata\\r\\n                );\\r\\n                if (!success) revert ERC6492DeployFailed(err);\\r\\n            }\\r\\n        } else {\\r\\n            sigToValidate = _signature;\\r\\n        }\\r\\n\\r\\n        // Try ERC-1271 verification\\r\\n        if (isCounterfactual || contractCodeLen > 0) {\\r\\n            try\\r\\n                IERC1271Wallet(_signer).isValidSignature(_hash, sigToValidate)\\r\\n            returns (bytes4 magicValue) {\\r\\n                bool isValid = magicValue == ERC1271_SUCCESS;\\r\\n\\r\\n                if (\\r\\n                    contractCodeLen == 0 &&\\r\\n                    isCounterfactual &&\\r\\n                    !allowSideEffects\\r\\n                ) {\\r\\n                    // if the call had side effects we need to return the\\r\\n                    // result using a `revert` (to undo the state changes)\\r\\n                    assembly {\\r\\n                        mstore(0, isValid)\\r\\n                        revert(31, 1)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                return isValid;\\r\\n            } catch (bytes memory err) {\\r\\n                revert ERC1271Revert(err);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // ecrecover verification\\r\\n        require(\\r\\n            _signature.length == 65,\\r\\n            \\\"SignatureValidator#recoverSigner: invalid signature length\\\"\\r\\n        );\\r\\n        bytes32 r = bytes32(_signature[0:32]);\\r\\n        bytes32 s = bytes32(_signature[32:64]);\\r\\n        uint8 v = uint8(_signature[64]);\\r\\n        if (v != 27 && v != 28) {\\r\\n            revert(\\\"SignatureValidator: invalid signature v value\\\");\\r\\n        }\\r\\n        return ecrecover(_hash, v, r, s) == _signer;\\r\\n    }\\r\\n\\r\\n    function isValidSigWithSideEffects(\\r\\n        address _signer,\\r\\n        bytes32 _hash,\\r\\n        bytes calldata _signature\\r\\n    ) external returns (bool) {\\r\\n        return this.isValidSigImpl(_signer, _hash, _signature, true);\\r\\n    }\\r\\n\\r\\n    function isValidSig(\\r\\n        address _signer,\\r\\n        bytes32 _hash,\\r\\n        bytes calldata _signature\\r\\n    ) external returns (bool) {\\r\\n        try this.isValidSigImpl(_signer, _hash, _signature, false) returns (\\r\\n            bool isValid\\r\\n        ) {\\r\\n            return isValid;\\r\\n        } catch (bytes memory error) {\\r\\n            // in order to avoid side effects from the contract getting deployed, the entire call will revert with a single byte result\\r\\n            uint len = error.length;\\r\\n            if (len == 1) return error[0] == 0x01;\\r\\n            // all other errors are simply forwarded, but in custom formats so that nothing else can revert with a single byte in the call\\r\\n            else\\r\\n                assembly {\\r\\n                    revert(error, len)\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// this is a helper so we can perform validation in a single eth_call without pre-deploying a singleton\\r\\ncontract ValidateSigOffchain {\\r\\n    constructor(address _signer, bytes32 _hash, bytes memory _signature) {\\r\\n        UniversalSigValidator validator = new UniversalSigValidator();\\r\\n        bool isValidSig = validator.isValidSigWithSideEffects(\\r\\n            _signer,\\r\\n            _hash,\\r\\n            _signature\\r\\n        );\\r\\n        assembly {\\r\\n            mstore(0, isValidSig)\\r\\n            return(31, 1)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1bf0a47eed6fbab1c21e73fd6c1bafca11796494294747ce8246147aff24dee5\",\"license\":\"MIT\"},\"src/wallet/EtherspotWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-inline-assembly */\\r\\n/* solhint-disable reason-string */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"../../account-abstraction/contracts/core/BaseAccount.sol\\\";\\r\\nimport \\\"../../account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol\\\";\\r\\nimport \\\"../helpers/UniversalSignatureValidator.sol\\\";\\r\\nimport \\\"../access/AccessController.sol\\\";\\r\\n\\r\\ncontract EtherspotWallet is\\r\\n    BaseAccount,\\r\\n    UUPSUpgradeable,\\r\\n    Initializable,\\r\\n    TokenCallbackHandler,\\r\\n    UniversalSigValidator,\\r\\n    AccessController,\\r\\n    IERC1271Wallet\\r\\n{\\r\\n    bytes4 private constant ERC1271_SUCCESS = 0x1626ba7e;\\r\\n\\r\\n    /// LIBRARIES\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    /// STORAGE\\r\\n    IEntryPoint private _entryPoint;\\r\\n\\r\\n    /// EVENTS\\r\\n    event EtherspotWalletInitialized(\\r\\n        IEntryPoint indexed entryPoint,\\r\\n        address indexed owner\\r\\n    );\\r\\n    event EtherspotWalletReceived(address indexed from, uint256 indexed amount);\\r\\n    event EntryPointChanged(address oldEntryPoint, address newEntryPoint);\\r\\n\\r\\n    /// EXTERNAL METHODS\\r\\n\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n        // solhint-disable-previous-line no-empty-blocks\\r\\n    }\\r\\n\\r\\n    function execute(\\r\\n        address dest,\\r\\n        uint256 value,\\r\\n        bytes calldata func\\r\\n    ) external onlyOwnerOrEntryPoint(address(entryPoint())) {\\r\\n        _call(dest, value, func);\\r\\n    }\\r\\n\\r\\n    function executeBatch(\\r\\n        address[] calldata dest,\\r\\n        uint256[] calldata value,\\r\\n        bytes[] calldata func\\r\\n    ) external onlyOwnerOrEntryPoint(address(entryPoint())) {\\r\\n        require(\\r\\n            dest.length > 0 &&\\r\\n            dest.length == value.length &&\\r\\n            value.length == func.length,\\r\\n            \\\"EtherspotWallet:: executeBatch: wrong array lengths\\\"\\r\\n        );\\r\\n        for (uint256 i; i < dest.length; ) {\\r\\n            _call(dest[i], value[i], func[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateEntryPoint(address _newEntryPoint) external onlyOwner {\\r\\n        require(\\r\\n            _newEntryPoint != address(0),\\r\\n            \\\"EtherspotWallet:: EntryPoint address cannot be zero\\\"\\r\\n        );\\r\\n        emit EntryPointChanged(address(_entryPoint), _newEntryPoint);\\r\\n        _entryPoint = IEntryPoint(payable(_newEntryPoint));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Implementation of ISignatureValidator\\r\\n     * @dev doesn't allow the owner to be a smart contract, SCW should use {isValidSig}\\r\\n     * @param hash 32 bytes hash of the data signed on the behalf of address(msg.sender)\\r\\n     * @param signature Signature byte array associated with _dataHash\\r\\n     * @return magicValue ERC1271 magic value.\\r\\n     */\\r\\n    function isValidSignature(\\r\\n        bytes32 hash,\\r\\n        bytes calldata signature\\r\\n    ) external view returns (bytes4 magicValue) {\\r\\n        address owner = ECDSA.recover(hash, signature);\\r\\n        if (isOwner(owner)) {\\r\\n            return ERC1271_SUCCESS;\\r\\n        }\\r\\n        return bytes4(0xffffffff);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        emit EtherspotWalletReceived(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    /// PUBLIC\\r\\n\\r\\n    /// @inheritdoc BaseAccount\\r\\n    function entryPoint() public view virtual override returns (IEntryPoint) {\\r\\n        return _entryPoint;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * check current account deposit in the entryPoint\\r\\n     */\\r\\n    function getDeposit() public view returns (uint256) {\\r\\n        return entryPoint().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        IEntryPoint anEntryPoint,\\r\\n        address anOwner\\r\\n    ) public virtual initializer {\\r\\n        _initialize(anEntryPoint, anOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * deposit more funds for this account in the entryPoint\\r\\n     */\\r\\n    function addDeposit() public payable {\\r\\n        entryPoint().depositTo{value: msg.value}(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * withdraw value from the account's deposit\\r\\n     * @param withdrawAddress target to send to\\r\\n     * @param amount to withdraw\\r\\n     */\\r\\n    function withdrawDepositTo(\\r\\n        address payable withdrawAddress,\\r\\n        uint256 amount\\r\\n    ) public onlyOwner {\\r\\n        entryPoint().withdrawTo(withdrawAddress, amount);\\r\\n    }\\r\\n\\r\\n    /// INTERNAL\\r\\n\\r\\n    function _initialize(\\r\\n        IEntryPoint anEntryPoint,\\r\\n        address anOwner\\r\\n    ) internal virtual {\\r\\n        _entryPoint = anEntryPoint;\\r\\n        _addOwner(anOwner);\\r\\n        emit EtherspotWalletInitialized(_entryPoint, anOwner);\\r\\n    }\\r\\n\\r\\n    function _call(address target, uint256 value, bytes memory data) internal {\\r\\n        (bool success, bytes memory result) = target.call{value: value}(data);\\r\\n        if (!success) {\\r\\n            assembly {\\r\\n                revert(add(result, 32), mload(result))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _validateSignature(\\r\\n        UserOperation calldata userOp,\\r\\n        bytes32 userOpHash\\r\\n    ) internal virtual override returns (uint256 validationData) {\\r\\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\\r\\n        if (!isOwner(hash.recover(userOp.signature)))\\r\\n            return SIG_VALIDATION_FAILED;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(\\r\\n        address newImplementation\\r\\n    ) internal view override onlyOwner {\\r\\n        (newImplementation);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38d521fe3201d3209ec6db878b738fb49e734368a7363b025975e21f4f15befa\",\"license\":\"MIT\"},\"src/wallet/EtherspotWalletFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./EtherspotWallet.sol\\\";\\r\\nimport \\\"./Proxy.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.\\r\\n */\\r\\ncontract EtherspotWalletFactory {\\r\\n    event AccountCreation(address indexed wallet, address indexed owner, uint256 index);\\r\\n\\r\\n    address public immutable accountImplementation;\\r\\n\\r\\n    constructor() {\\r\\n        accountImplementation = address(new EtherspotWallet());\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\r\\n    function accountCreationCode() public pure returns (bytes memory) {\\r\\n        return type(Proxy).creationCode;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new account\\r\\n     * @param entryPoint address of the EntryPoint contract\\r\\n     * @param owner owner of the account to be deployed\\r\\n     * @param index extra salt that allows to deploy more account if needed for same owner\\r\\n     * @return ret the address of the deployed account\\r\\n     */\\r\\n    function createAccount(\\r\\n        IEntryPoint entryPoint,\\r\\n        address owner,\\r\\n        uint256 index\\r\\n    ) public returns (address ret) {\\r\\n        bytes memory initializer = getInitializer(entryPoint, owner);\\r\\n\\r\\n        bytes32 salt = keccak256(\\r\\n            abi.encodePacked(keccak256(initializer), index)\\r\\n        );\\r\\n\\r\\n        bytes memory deploymentData = abi.encodePacked(\\r\\n            type(Proxy).creationCode,\\r\\n            uint256(uint160(accountImplementation))\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            ret := create2(\\r\\n                0x0,\\r\\n                add(0x20, deploymentData),\\r\\n                mload(deploymentData),\\r\\n                salt\\r\\n            )\\r\\n        }\\r\\n        require(address(ret) != address(0), \\\"Create2 call failed\\\");\\r\\n\\r\\n        // calldata for init method\\r\\n        if (initializer.length > 0) {\\r\\n            // solhint-disable-next-line no-inline-assembly\\r\\n            assembly {\\r\\n                if eq(\\r\\n                    call(\\r\\n                        gas(),\\r\\n                        ret,\\r\\n                        0,\\r\\n                        add(initializer, 0x20),\\r\\n                        mload(initializer),\\r\\n                        0,\\r\\n                        0\\r\\n                    ),\\r\\n                    0\\r\\n                ) {\\r\\n                    revert(0, 0)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit AccountCreation(ret, owner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deploys account using create2\\r\\n     * @param entryPoint address of the EntryPoint contract\\r\\n     * @param owner owner of the account to be deployed\\r\\n     * @param index extra salt that allows to deploy more account if needed for same owner\\r\\n     */\\r\\n    function getAddress(\\r\\n        IEntryPoint entryPoint,\\r\\n        address owner,\\r\\n        uint256 index\\r\\n    ) public view returns (address proxy) {\\r\\n        bytes memory initializer = getInitializer(entryPoint, owner);\\r\\n        bytes32 salt = keccak256(\\r\\n            abi.encodePacked(keccak256(initializer), index)\\r\\n        );\\r\\n        bytes memory code = abi.encodePacked(\\r\\n            type(Proxy).creationCode,\\r\\n            uint256(uint160(accountImplementation))\\r\\n        );\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(bytes1(0xff), address(this), salt, keccak256(code))\\r\\n        );\\r\\n        proxy = address(uint160(uint256(hash)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows to retrieve the initializer data for the account.\\r\\n     * @param entryPoint EntryPoint contract address\\r\\n     * @param owner EOA signatory for the account to be deployed\\r\\n     * @return initializer bytes for init method\\r\\n     */\\r\\n    function getInitializer(\\r\\n        IEntryPoint entryPoint,\\r\\n        address owner\\r\\n    ) internal view returns (bytes memory) {\\r\\n        return abi.encodeCall(\\r\\n          EtherspotWallet.initialize,\\r\\n          (entryPoint, owner)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xab4046fd93665173c29f3f9db00c9c1a89e3882c4dd1feb9b0a3458a13e0ac30\",\"license\":\"MIT\"},\"src/wallet/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Generic proxy contract allows to execute all transactions applying the code of a master contract.\\r\\n */\\r\\ncontract Proxy {\\r\\n    /**\\r\\n     * @notice Constructor function sets address of singleton contract.\\r\\n     * @param _singleton Singleton address.\\r\\n     */\\r\\n    constructor(address _singleton) {\\r\\n        require(_singleton != address(0), \\\"Invalid address provided\\\");\\r\\n        assembly {\\r\\n            sstore(address(), _singleton)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        address target;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            target := sload(address())\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            let success := delegatecall(gas(), target, 0, calldatasize(), 0, 0)\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n            if eq(success, 0) {\\r\\n                revert(0, returndatasize())\\r\\n            }\\r\\n            return(0, returndatasize())\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf8fabaf38805818b6d2b0a34a3e9b2a127ebbb0ea280384c7b372b61b32fc269\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000525760003560e01c806308a6354e146200005757806311464fbe146200008d5780631230aea214620000af57806331c884df14620000e5575b600080fd5b6200007560048036038101906200006f9190620005ad565b62000107565b6040516200008491906200061a565b60405180910390f35b6200009762000220565b604051620000a691906200061a565b60405180910390f35b620000cd6004803603810190620000c79190620005ad565b62000244565b604051620000dc91906200061a565b60405180910390f35b620000ef62000424565b604051620000fe9190620006d1565b60405180910390f35b60008062000116858562000451565b905060008180519060200120846040516020016200013692919062000749565b6040516020818303038152906040528051906020012090506000604051806020016200016290620004b5565b6020820181038252601f19601f820116604052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16604051602001620001c0929190620007bb565b6040516020818303038152906040529050600060ff60f81b30848480519060200120604051602001620001f7949392919062000888565b6040516020818303038152906040528051906020012090508060001c9450505050509392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008062000253858562000451565b905060008180519060200120846040516020016200027392919062000749565b6040516020818303038152906040528051906020012090506000604051806020016200029f90620004b5565b6020820181038252601f19601f820116604052507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16604051602001620002fd929190620007bb565b6040516020818303038152906040529050818151826020016000f59350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036200038c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000383906200093f565b60405180910390fd5b600083511115620003b35760008060008551602087016000895af103620003b257600080fd5b5b8573ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8967dcaa00d8fcb9bb2b5beff4aaf8c020063512cf08fbe11fec37a1e3a150f28760405162000412919062000972565b60405180910390a35050509392505050565b6060604051806020016200043890620004b5565b6020820181038252601f19601f82011660405250905090565b6060828260405160240162000468929190620009fa565b60405160208183030381529060405263485cc95560e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b6102298062000a2883390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004f582620004c8565b9050919050565b60006200050982620004e8565b9050919050565b6200051b81620004fc565b81146200052757600080fd5b50565b6000813590506200053b8162000510565b92915050565b6200054c81620004e8565b81146200055857600080fd5b50565b6000813590506200056c8162000541565b92915050565b6000819050919050565b620005878162000572565b81146200059357600080fd5b50565b600081359050620005a7816200057c565b92915050565b600080600060608486031215620005c957620005c8620004c3565b5b6000620005d9868287016200052a565b9350506020620005ec868287016200055b565b9250506040620005ff8682870162000596565b9150509250925092565b6200061481620004e8565b82525050565b600060208201905062000631600083018462000609565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200067357808201518184015260208101905062000656565b60008484015250505050565b6000601f19601f8301169050919050565b60006200069d8262000637565b620006a9818562000642565b9350620006bb81856020860162000653565b620006c6816200067f565b840191505092915050565b60006020820190508181036000830152620006ed818462000690565b905092915050565b6000819050919050565b6000819050919050565b6200071e6200071882620006f5565b620006ff565b82525050565b6000819050919050565b620007436200073d8262000572565b62000724565b82525050565b600062000757828562000709565b6020820191506200076982846200072e565b6020820191508190509392505050565b600081905092915050565b6000620007918262000637565b6200079d818562000779565b9350620007af81856020860162000653565b80840191505092915050565b6000620007c9828562000784565b9150620007d782846200072e565b6020820191508190509392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b620008326200082c82620007e7565b62000813565b82525050565b60008160601b9050919050565b6000620008528262000838565b9050919050565b6000620008668262000845565b9050919050565b620008826200087c82620004e8565b62000859565b82525050565b60006200089682876200081d565b600182019150620008a882866200086d565b601482019150620008ba828562000709565b602082019150620008cc828462000709565b60208201915081905095945050505050565b600082825260208201905092915050565b7f437265617465322063616c6c206661696c656400000000000000000000000000600082015250565b600062000927601383620008de565b91506200093482620008ef565b602082019050919050565b600060208201905081810360008301526200095a8162000918565b9050919050565b6200096c8162000572565b82525050565b600060208201905062000989600083018462000961565b92915050565b6000819050919050565b6000620009ba620009b4620009ae84620004c8565b6200098f565b620004c8565b9050919050565b6000620009ce8262000999565b9050919050565b6000620009e282620009c1565b9050919050565b620009f481620009d5565b82525050565b600060408201905062000a116000830185620009e9565b62000a20602083018462000609565b939250505056fe608060405234801561001057600080fd5b506040516102293803806102298339818101604052810190610032919061010d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009890610197565b60405180910390fd5b803055506101b7565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100da826100af565b9050919050565b6100ea816100cf565b81146100f557600080fd5b50565b600081519050610107816100e1565b92915050565b600060208284031215610123576101226100aa565b5b6000610131848285016100f8565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420616464726573732070726f76696465640000000000000000600082015250565b600061018160188361013a565b915061018c8261014b565b602082019050919050565b600060208201905081810360008301526101b081610174565b9050919050565b6064806101c56000396000f3fe60806040526000305490503660008037600080366000845af43d6000803e600081036029573d6000fd5b3d6000f3fea2646970667358221220fd5bc7b327c257148237aeb9d4d5db67690ab6fafe5b013e9764ea980f2756f664736f6c63430008110033a2646970667358221220c8118142dbf6ef1db32e4dee94a275bf8434f3a7b33bea83589b21b7e9ede68364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountCreationCode()": {
        "details": "Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address."
      },
      "createAccount(address,address,uint256)": {
        "params": {
          "entryPoint": "address of the EntryPoint contract",
          "index": "extra salt that allows to deploy more account if needed for same owner",
          "owner": "owner of the account to be deployed"
        },
        "returns": {
          "ret": "the address of the deployed account"
        }
      },
      "getAddress(address,address,uint256)": {
        "params": {
          "entryPoint": "address of the EntryPoint contract",
          "index": "extra salt that allows to deploy more account if needed for same owner",
          "owner": "owner of the account to be deployed"
        }
      }
    },
    "title": "Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createAccount(address,address,uint256)": {
        "notice": "Creates a new account"
      },
      "getAddress(address,address,uint256)": {
        "notice": "Deploys account using create2"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}