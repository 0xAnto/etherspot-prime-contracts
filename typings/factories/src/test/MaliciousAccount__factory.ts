/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MaliciousAccount,
  MaliciousAccountInterface,
} from "../../../src/test/MaliciousAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "sigTimeRange",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040516107ac3803806107ac83398181016040528101906100259190610117565b61003f67c65df5ae046f9fbd60c01b61009f60201b60201c565b61005967c0e7c939451c2d0760c01b61009f60201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610144565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d2826100a7565b9050919050565b60006100e4826100c7565b9050919050565b6100f4816100d9565b81146100ff57600080fd5b50565b600081519050610111816100eb565b92915050565b60006020828403121561012d5761012c6100a2565b5b600061013b84828501610102565b91505092915050565b610659806101536000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630825d1fc14610030575b600080fd5b61004a600480360381019061004591906103b6565b610060565b6040516100579190610448565b60405180910390f35b6000610076679ec56f5ddd7e961760c01b6102ba565b61008a67b55242037a3502c160c01b6102ba565b61009e676cc16db78c70741060c01b6102ba565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf983306040518363ffffffff1660e01b81526004016100f89190610472565b6000604051808303818588803b15801561011157600080fd5b505af1158015610125573d6000803e3d6000fd5b505050505061013e67df52d6a17af9450a60c01b6102ba565b61015267de4651edad31d5c060c01b6102ba565b60008560c001358660a00135876080013561016d91906104bc565b61017791906104bc565b905061018d67aba3b0f55e327a3d60c01b6102ba565b6101a16737fb418af388db6660c01b6102ba565b600081846101af9190610541565b90506101c5674e8184b57227b4e960c01b6102ba565b6101d9674a439e6afd87257a60c01b6102ba565b6000876101000135826101ec9190610572565b9050610202677448a0b7b729566060c01b6102ba565b61021667585ce038af6cd7af60c01b6102ba565b61022a674fcac2b41a4561a160c01b6102ba565b87602001358114610270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026790610603565b60405180910390fd5b61028467a0102643b9618c6d60c01b6102ba565b61029766bd370136d7a6a860c01b6102ba565b6102ab6709b7c51f4be54fdf60c01b6102ba565b60009350505050949350505050565b50565b600080fd5b600080fd5b600080fd5b600061016082840312156102e3576102e26102c7565b5b81905092915050565b6000819050919050565b6102ff816102ec565b811461030a57600080fd5b50565b60008135905061031c816102f6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061034d82610322565b9050919050565b61035d81610342565b811461036857600080fd5b50565b60008135905061037a81610354565b92915050565b6000819050919050565b61039381610380565b811461039e57600080fd5b50565b6000813590506103b08161038a565b92915050565b600080600080608085870312156103d0576103cf6102bd565b5b600085013567ffffffffffffffff8111156103ee576103ed6102c2565b5b6103fa878288016102cc565b945050602061040b8782880161030d565b935050604061041c8782880161036b565b925050606061042d878288016103a1565b91505092959194509250565b61044281610380565b82525050565b600060208201905061045d6000830184610439565b92915050565b61046c81610342565b82525050565b60006020820190506104876000830184610463565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104c782610380565b91506104d283610380565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105075761050661048d565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061054c82610380565b915061055783610380565b92508261056757610566610512565b5b828204905092915050565b600061057d82610380565b915061058883610380565b92508282101561059b5761059a61048d565b5b828203905092915050565b600082825260208201905092915050565b7f5265766572742061667465722066697273742076616c69646174696f6e000000600082015250565b60006105ed601d836105a6565b91506105f8826105b7565b602082019050919050565b6000602082019050818103600083015261061c816105e0565b905091905056fea2646970667358221220cd327d902c4f0ae4fb0ec72282984f5f3e87db954d2a973b097277498325fe3064736f6c634300080c0033";

type MaliciousAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MaliciousAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MaliciousAccount__factory extends ContractFactory {
  constructor(...args: MaliciousAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<MaliciousAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<MaliciousAccount>;
  }
  override getDeployTransaction(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override attach(address: string): MaliciousAccount {
    return super.attach(address) as MaliciousAccount;
  }
  override connect(signer: Signer): MaliciousAccount__factory {
    return super.connect(signer) as MaliciousAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MaliciousAccountInterface {
    return new utils.Interface(_abi) as MaliciousAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MaliciousAccount {
    return new Contract(address, _abi, signerOrProvider) as MaliciousAccount;
  }
}
