/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestExpirePaymaster,
  TestExpirePaymasterInterface,
} from "../../../src/test/TestExpirePaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "sigTimeRange",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001bef38038062001bef8339818101604052810190620000379190620003af565b80620000586200004c620000e160201b60201c565b620000e960201b60201c565b62000074674eccc7e3b137752860c01b620001ad60201b60201c565b620000906761d2b9b0f67ad7c960c01b620001ad60201b60201c565b620000ac67d9ad280a158e404360c01b620001ad60201b60201c565b620000bd81620001b060201b60201c565b50620000da67efc7c3f4d782e22060c01b6200027460201b60201c565b5062000464565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b620001cc6725e7584f7e25728160c01b620001ad60201b60201c565b620001dc6200027760201b60201c565b620001f8674d431bb5bd2d8c0660c01b620001ad60201b60201c565b62000214671f8727ca4f9ea6f060c01b620001ad60201b60201c565b62000230679519937192be203060c01b620001ad60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b50565b62000287620000e160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002ad6200030860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000306576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002fd9062000442565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003638262000336565b9050919050565b6000620003778262000356565b9050919050565b62000389816200036a565b81146200039557600080fd5b50565b600081519050620003a9816200037e565b92915050565b600060208284031215620003c857620003c762000331565b5b6000620003d88482850162000398565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200042a602083620003e1565b91506200043782620003f2565b602082019050919050565b600060208201905081810360008301526200045d816200041b565b9050919050565b61177b80620004746000396000f3fe6080604052600436106100c25760003560e01c8063b0d691fe1161007f578063c399ec8811610059578063c399ec881461020b578063d0e30db014610236578063f2fde38b14610240578063f465c77e14610269576100c2565b8063b0d691fe146101a0578063bb9fe6bf146101cb578063c23a5cea146101e2576100c2565b80630396cb60146100c7578063205c2878146100e3578063584465f21461010c578063715018a6146101355780638da5cb5b1461014c578063a9a2340914610177575b600080fd5b6100e160048036038101906100dc9190610e71565b6102a7565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610f32565b6103a4565b005b34801561011857600080fd5b50610133600480360381019061012e9190610fc2565b6104a3565b005b34801561014157600080fd5b5061014a61053f565b005b34801561015857600080fd5b50610161610553565b60405161016e9190610ffe565b60405180910390f35b34801561018357600080fd5b5061019e600480360381019061019991906110a3565b61057c565b005b3480156101ac57600080fd5b506101b56105fa565b6040516101c29190611176565b60405180910390f35b3480156101d757600080fd5b506101e0610620565b005b3480156101ee57600080fd5b5061020960048036038101906102049190611191565b610710565b005b34801561021757600080fd5b5061022061080c565b60405161022d91906111cd565b60405180910390f35b61023e6108eb565b005b34801561024c57600080fd5b5061026760048036038101906102629190611214565b6109b7565b005b34801561027557600080fd5b50610290600480360381019061028b919061129c565b610a3b565b60405161029e9291906113a4565b60405180910390f35b6102bb67ba155f5efe25da4f60c01b610b2b565b6102c3610b2e565b6102d76736fb2667161c914060c01b610b2b565b6102eb6741f0617f9794d16860c01b610b2b565b6102ff67790e549db14df0c260c01b610b2b565b61031367ce0737df6b9e42bb60c01b610b2b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396cb6034836040518363ffffffff1660e01b815260040161036f91906113e3565b6000604051808303818588803b15801561038857600080fd5b505af115801561039c573d6000803e3d6000fd5b505050505050565b6103b867b0a8c68e3f06c7ba60c01b610b2b565b6103c0610b2e565b6103d4678a1f9def4c20c6ff60c01b610b2b565b6103e8674342d23de7a3ed5a60c01b610b2b565b6103fc67cc9569cc5fe68f9d60c01b610b2b565b61041067b6f029ee77278ef160c01b610b2b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b815260040161046d92919061140d565b600060405180830381600087803b15801561048757600080fd5b505af115801561049b573d6000803e3d6000fd5b505050505050565b6104b76725e7584f7e25728160c01b610b2b565b6104bf610b2e565b6104d3674d431bb5bd2d8c0660c01b610b2b565b6104e7671f8727ca4f9ea6f060c01b610b2b565b6104fb679519937192be203060c01b610b2b565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610547610b2e565b6105516000610bac565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61059067850f91523560c17460c01b610b2b565b6105a467cfcc64f9dd3bc74260c01b610b2b565b6105b86720fb2285cc651da660c01b610b2b565b6105c0610c70565b6105d467df35162198eda5c560c01b610b2b565b6105e867124d5c09ea14919f60c01b610b2b565b6105f484848484610d30565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61063467095d65a7a668706c60c01b610b2b565b61063c610b2e565b610650674ef176416d9783d860c01b610b2b565b61066467bfe322990a47bc0760c01b610b2b565b61067867874d39101d99253960c01b610b2b565b61068c67b423ba4701a0393460c01b610b2b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b50505050565b6107246752f5d809a1298eaf60c01b610b2b565b61072c610b2e565b61074067ef5820faf1447c6560c01b610b2b565b61075467f97794d1bddfa2e060c01b610b2b565b610768674312e8c459c73fef60c01b610b2b565b61077c673464294413aed7d760c01b610b2b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b81526004016107d79190611436565b600060405180830381600087803b1580156107f157600080fd5b505af1158015610805573d6000803e3d6000fd5b5050505050565b600061082267f8256bc3292ec2f860c01b610b2b565b610836674659961ee68435b060c01b610b2b565b61084a6725709d707ada999460c01b610b2b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108a59190610ffe565b602060405180830381865afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e69190611466565b905090565b6108ff67fa008f0a2a61337260c01b610b2b565b610913670e56d1bb5ea9d80c60c01b610b2b565b610927674e2d9df39913ac2060c01b610b2b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b81526004016109839190610ffe565b6000604051808303818588803b15801561099c57600080fd5b505af11580156109b0573d6000803e3d6000fd5b5050505050565b6109bf610b2e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2690611516565b60405180910390fd5b610a3881610bac565b50565b60606000610a53673cd56a80d1086bd760c01b610dbb565b610a676787d9b88e8b19cb5e60c01b610dbb565b610a7b67f15f5625e82b2a6f60c01b610dbb565b610a8f67ed1a71aa53b2875f60c01b610dbb565b60008086806101200190610aa39190611545565b6014908092610ab4939291906115b2565b810190610ac1919061162d565b91509150610ad96718f5b98a202cf87a60c01b610dbb565b610af960008267ffffffffffffffff168467ffffffffffffffff16610dbe565b9250610b0f671030881e9de9b44960c01b610dbb565b6040518060200160405280600081525093505050935093915050565b50565b610b36610e23565b73ffffffffffffffffffffffffffffffffffffffff16610b54610553565b73ffffffffffffffffffffffffffffffffffffffff1614610baa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba1906116b9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610c84679bc326c49484188460c01b610b2b565b610c986724b5ec39eafd38f560c01b610b2b565b610cac673113ee9c61faced260c01b610b2b565b610cc0678b7ae48ea5ddd2cb60c01b610b2b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1a57600080fd5b610d2e67e77cb1e4072ac22860c01b610b2b565b565b610d44671367f038146a276b60c01b610b2b565b610d5867117ee8376efb738560c01b610b2b565b610d6c6797f87360883c20c560c01b610b2b565b610d8067314d1d68847cc6ee60c01b610b2b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db290611725565b60405180910390fd5b50565b6000610dd467f235e8795ced593e60c01b610b2b565b610de867aeabe88fe20d3d2960c01b610b2b565b610dfc67a4314aeab700f1c460c01b610b2b565b604882901b600884901b85610e12576000610e15565b60015b60ff16171790509392505050565b600033905090565b600080fd5b600080fd5b600063ffffffff82169050919050565b610e4e81610e35565b8114610e5957600080fd5b50565b600081359050610e6b81610e45565b92915050565b600060208284031215610e8757610e86610e2b565b5b6000610e9584828501610e5c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec982610e9e565b9050919050565b610ed981610ebe565b8114610ee457600080fd5b50565b600081359050610ef681610ed0565b92915050565b6000819050919050565b610f0f81610efc565b8114610f1a57600080fd5b50565b600081359050610f2c81610f06565b92915050565b60008060408385031215610f4957610f48610e2b565b5b6000610f5785828601610ee7565b9250506020610f6885828601610f1d565b9150509250929050565b6000610f7d82610e9e565b9050919050565b6000610f8f82610f72565b9050919050565b610f9f81610f84565b8114610faa57600080fd5b50565b600081359050610fbc81610f96565b92915050565b600060208284031215610fd857610fd7610e2b565b5b6000610fe684828501610fad565b91505092915050565b610ff881610f72565b82525050565b60006020820190506110136000830184610fef565b92915050565b6003811061102657600080fd5b50565b60008135905061103881611019565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126110635761106261103e565b5b8235905067ffffffffffffffff8111156110805761107f611043565b5b60208301915083600182028301111561109c5761109b611048565b5b9250929050565b600080600080606085870312156110bd576110bc610e2b565b5b60006110cb87828801611029565b945050602085013567ffffffffffffffff8111156110ec576110eb610e30565b5b6110f88782880161104d565b9350935050604061110b87828801610f1d565b91505092959194509250565b6000819050919050565b600061113c61113761113284610e9e565b611117565b610e9e565b9050919050565b600061114e82611121565b9050919050565b600061116082611143565b9050919050565b61117081611155565b82525050565b600060208201905061118b6000830184611167565b92915050565b6000602082840312156111a7576111a6610e2b565b5b60006111b584828501610ee7565b91505092915050565b6111c781610efc565b82525050565b60006020820190506111e260008301846111be565b92915050565b6111f181610f72565b81146111fc57600080fd5b50565b60008135905061120e816111e8565b92915050565b60006020828403121561122a57611229610e2b565b5b6000611238848285016111ff565b91505092915050565b600080fd5b6000610160828403121561125d5761125c611241565b5b81905092915050565b6000819050919050565b61127981611266565b811461128457600080fd5b50565b60008135905061129681611270565b92915050565b6000806000606084860312156112b5576112b4610e2b565b5b600084013567ffffffffffffffff8111156112d3576112d2610e30565b5b6112df86828701611246565b93505060206112f086828701611287565b925050604061130186828701610f1d565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561134557808201518184015260208101905061132a565b83811115611354576000848401525b50505050565b6000601f19601f8301169050919050565b60006113768261130b565b6113808185611316565b9350611390818560208601611327565b6113998161135a565b840191505092915050565b600060408201905081810360008301526113be818561136b565b90506113cd60208301846111be565b9392505050565b6113dd81610e35565b82525050565b60006020820190506113f860008301846113d4565b92915050565b61140781610ebe565b82525050565b600060408201905061142260008301856113fe565b61142f60208301846111be565b9392505050565b600060208201905061144b60008301846113fe565b92915050565b60008151905061146081610f06565b92915050565b60006020828403121561147c5761147b610e2b565b5b600061148a84828501611451565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611500602683611493565b915061150b826114a4565b604082019050919050565b6000602082019050818103600083015261152f816114f3565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261156257611561611536565b5b80840192508235915067ffffffffffffffff8211156115845761158361153b565b5b6020830192506001820236038313156115a05761159f611540565b5b509250929050565b600080fd5b600080fd5b600080858511156115c6576115c56115a8565b5b838611156115d7576115d66115ad565b5b6001850283019150848603905094509492505050565b600067ffffffffffffffff82169050919050565b61160a816115ed565b811461161557600080fd5b50565b60008135905061162781611601565b92915050565b6000806040838503121561164457611643610e2b565b5b600061165285828601611618565b925050602061166385828601611618565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006116a3602083611493565b91506116ae8261166d565b602082019050919050565b600060208201905081810360008301526116d281611696565b9050919050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b600061170f600d83611493565b915061171a826116d9565b602082019050919050565b6000602082019050818103600083015261173e81611702565b905091905056fea2646970667358221220fc350d50e02287bdab9ded2a7ce50b4d738cea00bb1ab1e4763ed4cf34dc903864736f6c634300080c0033";

type TestExpirePaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestExpirePaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestExpirePaymaster__factory extends ContractFactory {
  constructor(...args: TestExpirePaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestExpirePaymaster> {
    return super.deploy(
      _entryPoint,
      overrides || {}
    ) as Promise<TestExpirePaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_entryPoint, overrides || {});
  }
  override attach(address: string): TestExpirePaymaster {
    return super.attach(address) as TestExpirePaymaster;
  }
  override connect(signer: Signer): TestExpirePaymaster__factory {
    return super.connect(signer) as TestExpirePaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestExpirePaymasterInterface {
    return new utils.Interface(_abi) as TestExpirePaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestExpirePaymaster {
    return new Contract(address, _abi, signerOrProvider) as TestExpirePaymaster;
  }
}
