/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestToken,
  TestTokenInterface,
} from "../../../src/test/TestToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600381526020017f54535400000000000000000000000000000000000000000000000000000000008152506040518060400160405280600981526020017f54657374546f6b656e0000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620000d7565b508060049080519060200190620000af929190620000d7565b505050620000ce6793c6deeaa990dd5460c01b620000d460201b60201c565b620001ec565b50565b828054620000e590620001b6565b90600052602060002090601f01602090048101928262000109576000855562000155565b82601f106200012457805160ff191683800117855562000155565b8280016001018555821562000155579182015b828111156200015457825182559160200191906001019062000137565b5b50905062000164919062000168565b5090565b5b808211156200018357600081600090555060010162000169565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001cf57607f821691505b60208210811415620001e657620001e562000187565b5b50919050565b61149680620001fc6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f19146101a357806370a08231146101bf57806395d89b41146101ef578063a457c2d71461020d578063a9059cbb1461023d578063dd62ed3e1461026d576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c161029d565b6040516100ce9190610ce4565b60405180910390f35b6100f160048036038101906100ec9190610d9f565b61032f565b6040516100fe9190610dfa565b60405180910390f35b61010f610352565b60405161011c9190610e24565b60405180910390f35b61013f600480360381019061013a9190610e3f565b61035c565b60405161014c9190610dfa565b60405180910390f35b61015d61038b565b60405161016a9190610eae565b60405180910390f35b61018d60048036038101906101889190610d9f565b610394565b60405161019a9190610dfa565b60405180910390f35b6101bd60048036038101906101b89190610d9f565b6103cb565b005b6101d960048036038101906101d49190610ec9565b610415565b6040516101e69190610e24565b60405180910390f35b6101f761045d565b6040516102049190610ce4565b60405180910390f35b61022760048036038101906102229190610d9f565b6104ef565b6040516102349190610dfa565b60405180910390f35b61025760048036038101906102529190610d9f565b610566565b6040516102649190610dfa565b60405180910390f35b61028760048036038101906102829190610ef6565b610589565b6040516102949190610e24565b60405180910390f35b6060600380546102ac90610f65565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610f65565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b60008061033a610610565b9050610347818585610618565b600191505092915050565b6000600254905090565b600080610367610610565b90506103748582856107e3565b61037f85858561086f565b60019150509392505050565b60006012905090565b60008061039f610610565b90506103c08185856103b18589610589565b6103bb9190610fc6565b610618565b600191505092915050565b6103df679c8fbf8b14d90c6360c01b610ae7565b6103f367bacf90d60e12099660c01b610ae7565b610407679ec124c7e364a72160c01b610ae7565b6104118282610aea565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461046c90610f65565b80601f016020809104026020016040519081016040528092919081815260200182805461049890610f65565b80156104e55780601f106104ba576101008083540402835291602001916104e5565b820191906000526020600020905b8154815290600101906020018083116104c857829003601f168201915b5050505050905090565b6000806104fa610610565b905060006105088286610589565b90508381101561054d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105449061108e565b60405180910390fd5b61055a8286868403610618565b60019250505092915050565b600080610571610610565b905061057e81858561086f565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610688576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067f90611120565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef906111b2565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107d69190610e24565b60405180910390a3505050565b60006107ef8484610589565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610869578181101561085b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108529061121e565b60405180910390fd5b6108688484848403610618565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d6906112b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561094f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094690611342565b60405180910390fd5b61095a838383610c41565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d7906113d4565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ace9190610e24565b60405180910390a3610ae1848484610c46565b50505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5190611440565b60405180910390fd5b610b6660008383610c41565b8060026000828254610b789190610fc6565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c299190610e24565b60405180910390a3610c3d60008383610c46565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c85578082015181840152602081019050610c6a565b83811115610c94576000848401525b50505050565b6000601f19601f8301169050919050565b6000610cb682610c4b565b610cc08185610c56565b9350610cd0818560208601610c67565b610cd981610c9a565b840191505092915050565b60006020820190508181036000830152610cfe8184610cab565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d3682610d0b565b9050919050565b610d4681610d2b565b8114610d5157600080fd5b50565b600081359050610d6381610d3d565b92915050565b6000819050919050565b610d7c81610d69565b8114610d8757600080fd5b50565b600081359050610d9981610d73565b92915050565b60008060408385031215610db657610db5610d06565b5b6000610dc485828601610d54565b9250506020610dd585828601610d8a565b9150509250929050565b60008115159050919050565b610df481610ddf565b82525050565b6000602082019050610e0f6000830184610deb565b92915050565b610e1e81610d69565b82525050565b6000602082019050610e396000830184610e15565b92915050565b600080600060608486031215610e5857610e57610d06565b5b6000610e6686828701610d54565b9350506020610e7786828701610d54565b9250506040610e8886828701610d8a565b9150509250925092565b600060ff82169050919050565b610ea881610e92565b82525050565b6000602082019050610ec36000830184610e9f565b92915050565b600060208284031215610edf57610ede610d06565b5b6000610eed84828501610d54565b91505092915050565b60008060408385031215610f0d57610f0c610d06565b5b6000610f1b85828601610d54565b9250506020610f2c85828601610d54565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f7d57607f821691505b60208210811415610f9157610f90610f36565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fd182610d69565b9150610fdc83610d69565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561101157611010610f97565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611078602583610c56565b91506110838261101c565b604082019050919050565b600060208201905081810360008301526110a78161106b565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061110a602483610c56565b9150611115826110ae565b604082019050919050565b60006020820190508181036000830152611139816110fd565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061119c602283610c56565b91506111a782611140565b604082019050919050565b600060208201905081810360008301526111cb8161118f565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611208601d83610c56565b9150611213826111d2565b602082019050919050565b60006020820190508181036000830152611237816111fb565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061129a602583610c56565b91506112a58261123e565b604082019050919050565b600060208201905081810360008301526112c98161128d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061132c602383610c56565b9150611337826112d0565b604082019050919050565b6000602082019050818103600083015261135b8161131f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006113be602683610c56565b91506113c982611362565b604082019050919050565b600060208201905081810360008301526113ed816113b1565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061142a601f83610c56565b9150611435826113f4565b602082019050919050565b600060208201905081810360008301526114598161141d565b905091905056fea26469706673582212205dff0b0d1dcddaca651754ef62fe58d3ced3476de0ef5af9f3e5e56ba30762f064736f6c634300080c0033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestToken> {
    return super.deploy(overrides || {}) as Promise<TestToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  override connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
