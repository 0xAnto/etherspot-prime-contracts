/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { TestUtil, TestUtilInterface } from "../../../src/test/TestUtil";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "op",
        type: "tuple",
      },
    ],
    name: "packUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610321806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633a24dea414610030575b600080fd5b61004a60048036038101906100459190610175565b610060565b6040516100579190610257565b60405180910390f35b606061007667e27edfcc4d6bdff760c01b6100ae565b61008a67b3c11f90224c26c960c01b6100ae565b61009e67b1f44927990805e260c01b6100ae565b6100a7826100b1565b9050919050565b50565b60606100c767e2f65444bb7a869960c01b610143565b6100db677451d5c0f2b6051960c01b610143565b6100ef67c5c078270cfb899b60c01b610143565b366000838061014001906101039190610288565b9150915061011b675af762593322d4ce60c01b610143565b8360208184030360405194506020810185016040528085528082602087013750505050919050565b50565b600080fd5b600080fd5b600080fd5b6000610160828403121561016c5761016b610150565b5b81905092915050565b60006020828403121561018b5761018a610146565b5b600082013567ffffffffffffffff8111156101a9576101a861014b565b5b6101b584828501610155565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101f85780820151818401526020810190506101dd565b83811115610207576000848401525b50505050565b6000601f19601f8301169050919050565b6000610229826101be565b61023381856101c9565b93506102438185602086016101da565b61024c8161020d565b840191505092915050565b60006020820190508181036000830152610271818461021e565b905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126102a5576102a4610279565b5b80840192508235915067ffffffffffffffff8211156102c7576102c661027e565b5b6020830192506001820236038313156102e3576102e2610283565b5b50925092905056fea2646970667358221220f043c8eb8a817e68b6f1aa15ef6f4281e44c9c40ec59b753b82882272a07725864736f6c634300080c0033";

type TestUtilConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestUtilConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestUtil__factory extends ContractFactory {
  constructor(...args: TestUtilConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestUtil> {
    return super.deploy(overrides || {}) as Promise<TestUtil>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestUtil {
    return super.attach(address) as TestUtil;
  }
  override connect(signer: Signer): TestUtil__factory {
    return super.connect(signer) as TestUtil__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestUtilInterface {
    return new utils.Interface(_abi) as TestUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestUtil {
    return new Contract(address, _abi, signerOrProvider) as TestUtil;
  }
}
