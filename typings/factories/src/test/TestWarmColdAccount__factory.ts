/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestWarmColdAccount,
  TestWarmColdAccountInterface,
} from "../../../src/test/TestWarmColdAccount";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_ep",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getAggregator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
    ],
    name: "touchPaymaster",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "touchStorage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "missingAccountFunds",
        type: "uint256",
      },
    ],
    name: "validateUserOp",
    outputs: [
      {
        internalType: "uint256",
        name: "sigTimeRange",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260018055604051610aaf380380610aaf8339818101604052810190610029919061011b565b610043676cf4ee3dfb0b054660c01b6100a360201b60201c565b61005d678cd4c4ea38be4e2460c01b6100a360201b60201c565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610148565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d6826100ab565b9050919050565b60006100e8826100cb565b9050919050565b6100f8816100dd565b811461010357600080fd5b50565b600081519050610115816100ef565b92915050565b600060208284031215610131576101306100a6565b5b600061013f84828501610106565b91505092915050565b610958806101576000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630825d1fc1461005c5780633ad59dbc1461008c578063c19d93fb146100aa578063f115d40d146100c8578063fb0c2425146100f8575b600080fd5b61007660048036038101906100719190610682565b610116565b6040516100839190610714565b60405180910390f35b610094610467565b6040516100a1919061073e565b60405180910390f35b6100b26104dd565b6040516100bf9190610714565b60405180910390f35b6100e260048036038101906100dd9190610759565b6104e3565b6040516100ef9190610714565b60405180910390f35b610100610540565b60405161010d9190610714565b60405180910390f35b600061012c678738696ae635d68a60c01b610586565b61014067181d2d6f40fec8a960c01b610586565b61015467bb4d1ac0ef88a8bf60c01b610586565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf983306040518363ffffffff1660e01b81526004016101ae919061073e565b6000604051808303818588803b1580156101c757600080fd5b505af11580156101db573d6000803e3d6000fd5b50505050506101f4678c4f4b9d7241836760c01b610586565b61020867c5d4f9911ee74a4e60c01b610586565b6001856020013514156102ca57610229671416276c19b404f660c01b610586565b61023d6736f0a4241510580460c01b610586565b61025167b9cbdc5273274a5960c01b610586565b3073ffffffffffffffffffffffffffffffffffffffff1663fb0c24256103e86040518263ffffffff1660e01b81526004016020604051808303818786fa15801561029f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102c4919061079b565b50610433565b6102de6741674895f8f329a460c01b610586565b6102f267a34ed38a4a9f49f960c01b610586565b60028560200135141561041d5761031367e795b5adeff33a1360c01b610586565b6103276741cbe31ac50209e260c01b610586565b61033b6786db41ac6633eb5660c01b610586565b60008580610120019061034e91906107d7565b60009060149261036093929190610844565b9061036b91906108c3565b60601c905061038467636252f0a980831960c01b610586565b610398679e8a175a214626f560c01b610586565b3073ffffffffffffffffffffffffffffffffffffffff1663f115d40d6103e8836040518363ffffffff1660e01b81526004016103d4919061073e565b6020604051808303818786fa1580156103f1573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610416919061079b565b5050610432565b610431672c981bfe629288cd60c01b610586565b5b5b6104476763fca68a013e587160c01b610586565b61045b67e3041eb29c4490d860c01b610586565b60009050949350505050565b600061047d6784d93990fe5156cf60c01b610586565b61049167fb06d1bfb3c6fa1060c01b610586565b6104a567186d03d398189b1760c01b610586565b6104ad610540565b506104c267db68b70f1b4a5b7a60c01b610586565b6104d6670b925de2f3af7ea460c01b610586565b6000905090565b60015481565b60006104f967da5c4ace0bfce20b60c01b610586565b61050d675befbbf4f98084ed60c01b610586565b610521677ba8bc382b16661d60c01b610586565b8173ffffffffffffffffffffffffffffffffffffffff163b9050919050565b6000610556677b09eb1104e5f6fb60c01b610586565b61056a6740b5648c6e1dadb960c01b610586565b61057e676a552f8d2163966160c01b610586565b600154905090565b50565b600080fd5b600080fd5b600080fd5b600061016082840312156105af576105ae610593565b5b81905092915050565b6000819050919050565b6105cb816105b8565b81146105d657600080fd5b50565b6000813590506105e8816105c2565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610619826105ee565b9050919050565b6106298161060e565b811461063457600080fd5b50565b60008135905061064681610620565b92915050565b6000819050919050565b61065f8161064c565b811461066a57600080fd5b50565b60008135905061067c81610656565b92915050565b6000806000806080858703121561069c5761069b610589565b5b600085013567ffffffffffffffff8111156106ba576106b961058e565b5b6106c687828801610598565b94505060206106d7878288016105d9565b93505060406106e887828801610637565b92505060606106f98782880161066d565b91505092959194509250565b61070e8161064c565b82525050565b60006020820190506107296000830184610705565b92915050565b6107388161060e565b82525050565b6000602082019050610753600083018461072f565b92915050565b60006020828403121561076f5761076e610589565b5b600061077d84828501610637565b91505092915050565b60008151905061079581610656565b92915050565b6000602082840312156107b1576107b0610589565b5b60006107bf84828501610786565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126107f4576107f36107c8565b5b80840192508235915067ffffffffffffffff821115610816576108156107cd565b5b602083019250600182023603831315610832576108316107d2565b5b509250929050565b600080fd5b600080fd5b600080858511156108585761085761083a565b5b838611156108695761086861083f565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffffffffffffffffffffffffffffffffffff00000000000000000000000082169050919050565b600082821b905092915050565b60006108cf838361087f565b826108da813561088a565b9250601482101561091a576109157fffffffffffffffffffffffffffffffffffffffff000000000000000000000000836014036008026108b6565b831692505b50509291505056fea2646970667358221220702d8dea9013c88375a3781f14dce2ad0b047d269b1919acf411d6cfdf3689db64736f6c634300080c0033";

type TestWarmColdAccountConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestWarmColdAccountConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestWarmColdAccount__factory extends ContractFactory {
  constructor(...args: TestWarmColdAccountConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<TestWarmColdAccount> {
    return super.deploy(_ep, overrides || {}) as Promise<TestWarmColdAccount>;
  }
  override getDeployTransaction(
    _ep: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ep, overrides || {});
  }
  override attach(address: string): TestWarmColdAccount {
    return super.attach(address) as TestWarmColdAccount;
  }
  override connect(signer: Signer): TestWarmColdAccount__factory {
    return super.connect(signer) as TestWarmColdAccount__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestWarmColdAccountInterface {
    return new utils.Interface(_abi) as TestWarmColdAccountInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestWarmColdAccount {
    return new Contract(address, _abi, signerOrProvider) as TestWarmColdAccount;
  }
}
